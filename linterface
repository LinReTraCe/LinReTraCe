#! /usr/bin/env python

from __future__ import print_function, division, absolute_import
import sys
import logging

from  structure.es import ElectronicStructure
from  structure.inout import h5output
from  structure.aux import LogFormatter

import numpy as np

class StructureFromArrays(ElectronicStructure):
  '''
  Generic electronic structure that is agnostic to the details.
  This class is used to load in essential information
  - nkx
  - nky
  - nkz
  - crystal volume in AA^3
  - filling
  and numpy arrays that represent
  - kmesh multiplicity
  - energies
  - optical elements (intra or full)
  - optional: bfield intra band optical elements
  '''

  def __init__(self, nkx, nky, nkz, rvec, charge):
    ''' define essential information '''
    super(StructureFromArrays,self).__init__()
    self.nkx        = nkx
    self.nky        = nky
    self.nkz        = nkz
    self.rvec       = np.array(rvec,dtype=np.float64)
    self.vol        = np.abs(np.dot(np.cross(self.rvec[0,:],self.rvec[1,:]),self.rvec[2,:]))
    self.kvec       = np.zeros_like(self.rvec, dtype=np.float64)
    self.kvec[0,:]  = np.cross(self.rvec[1,:],self.rvec[2,:])
    self.kvec[1,:]  = np.cross(self.rvec[2,:],self.rvec[0,:])
    self.kvec[2,:]  = np.cross(self.rvec[0,:],self.rvec[1,:])
    self.kvec      *= 2*np.pi / self.vol
    self.charge     = charge
    self.dims       = np.array([ik>1 for ik in [self.nkx,self.nky,self.nkz]])
    self.ndim       = np.sum(self.dims.astype(int))

  def loadData(self, multiplicity, energies, optical, boptical=None, mu=None, kpoints=None):
    ''' read in
      kmesh multiplicity : shape [nkp] float64
        nkp: number of kpoints
      energies : shape [spins, nkp, bands] float64
        spins: number of spins 1/2
        bands: number of bands
               the energies have to be sorted
      optical  : shape
                        [spins, nkp, bands, bands, elements] float64
                    or  [spins, nkp, bands, elements] float64
                 the first provides the _full_ elements (intra+inter)
                 the second provides only the intra elements
        elements: 3 if orthogonal -- xx yy zz
                  6 if not        -- xx yy zz xz xz yz

      optional: boptical : shape [spins, nkp, bands, 3, 3, 3]
      optional: mu : set chemical potential to specific value or search it
                     important for gapped systems
      optional: kpoints : shape [nkp, 3]
                  the values should be in fractions of the reciprocal lattice vectors: 0 <= value < 1
    '''

    self.multiplicity = np.array(multiplicity, dtype=int)
    energies = np.array(energies, dtype=np.float64)
    optical  = np.array(optical,  dtype=np.float64)
    if boptical:
      boptical = np.array(boptical, dtype=np.complex128)

    if np.abs(np.sum(self.multiplicity) - self.nkx*self.nky*self.nkz) > 1e-6:
      raise IOError('Multiplicity sum does not agree with kmesh')
    if sum(multiplicity) != np.sum(self.multiplicity):
      raise IOError('Multiplicity array does not contain integers')

    self.nkp = self.multiplicity.shape[0]
    if self.nkp == self.nkx*self.nky*self.nkz:
      self.irreducible = False
    else:
      self.irreducible = True

    if kpoints is None:
      self.kpoints = np.zeros((self.nkp,3), dtype=np.float64) # we dont care about the point info
    else:
      self.kpoints = np.array(self.kpoints, dtype=np.float64)

    self.spins, _, self.energyBandMax = energies.shape

    if self.spins==1:
      self.weightsum = 2
    else:
      self.weightsum = 1

    multsum = np.sum(self.multiplicity)
    self.weights = self.multiplicity / multsum * self.weightsum

    for ispin in range(self.spins):
      self.energies.append(energies[ispin,...])

    self.opticalBandMin = 0
    self.opticalBandMax = self.energyBandMax
    self.opticdiag = True
    if len(optical.shape) == 4: # intra only
      self.opticfull = False
      self.opticalDiag.append(optical[ispin,...])
    elif len(optical.shape) == 4: # inter + intra
      self.opticfull = True
      self.opticalMoments.append(optical[ispin,...])
      self.opticalDiag.append( \
        optical[ispin,:,np.arange(self.energyBandMax),np.arange(self.energyBandMax),:])

    if boptical is not None:
      self.magnetic = True
      self.BopticalDiag.append(boptical[ispin,...])
    else:
      self.magnetic = False

    self.mu = mu

  def outputData(self, fname):
    ''' output data to provided filename '''

    self._calcFermiLevel(self.mu)
    if self.magnetic:
      h5output(fname, self, self)
    else:
      h5output(fname, self)

def setLogger():
  ''' some logging '''
  logger = logging.getLogger()
  logger.setLevel(logging.DEBUG) # root logger
  console = logging.StreamHandler()
  console.setFormatter(LogFormatter())
  console.setLevel(logging.INFO) # console logger print INFO, WARNING, ERROR and CRITICAL
  logger.addHandler(console)
  return logger

def main():
  logger = setLogger()
  logger.info('Preprocessing of arbitrary e(k) data for LRTC')
  logger.info('Please load your data accordingly with the \'main\' function of this script')
  sys.exit(0)

  '''           a1       a2       a3     '''
  lattice = [[5,0,0], [0,5,0], [0,0,1]]
  test = StructureFromArrays(nkx=10, nky=10, nkz=10, rvec=lattice, charge=1)

  multiplicity = np.ones((1000,), dtype=np.float64) # nkp
  energies = np.zeros((1,1000,1), dtype=np.float64) # spin, nkp, bands
  energies[0,:500,0] = -1.
  energies[0,500:,0] = 1.
  optical = np.ones((1,1000,1,3), dtype=np.float64) # spins, nkp, bands elemenets (3/6)

  test.loadData(multiplicity, energies, optical)
  test.outputData('test.hdf5')

if __name__ == '__main__':
  main()
