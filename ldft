#! /usr/bin/env python

from __future__ import print_function, division, absolute_import
import argparse
import os
import sys
import logging

from structure.dftdetect import DftDetection
from structure.inout     import h5output
from structure.trunc     import truncate
from structure.trunc     import TruncationError
from structure.auxiliary import LogFormatter

try:
  from structure.boltztrap import BoltztrapInterpolation
  btp_exists = True
except ImportError:
  btp_exists = False

'''
ldft: Pre-processing of DFT codes for the LRTC code
'''

__author__     = 'Matthias Pickem'
__maintainer__ = 'Matthias Pickem'
__email__      = 'matthias.pickem@gmail.com'
__version__    = '0.3'
__status__     = 'Dev'
__license__    = 'GPLv3'
__credits__    = ['Matthias Pickem', 'Emanuele Maggio', 'Jan M. Tomczak']

def parse_args(args=None):
  parser = argparse.ArgumentParser(
    description='Argument parser for the DFT pre-processing of LRTC',
    epilog="That's the end of the help")
  parser.add_argument('system',     help='Path to DFT calculation (Wien2K Folder or Vasp Folder / vasprun.xml directly')
  parser.add_argument('-o', '--output',   help='Outputname of hdf5 (default="lrtc-dft.hdf5")', default='lrtc-dft.hdf5')
  parser.add_argument('--optic',    help='Read optical elements (Wien2K)', default=False, action='store_true')

  parser.add_argument('--trunc', nargs=2, help='Relative energy levels to include in the truncation. (relative to DFT chem. potential in [eV], e.g. -5 5)')
  parser.add_argument('--abs',   help='Absolute energy levels in trunc option. Must include Fermi level.', default=False, action='store_true')

  parser.add_argument('--interp',   nargs='?', help='Interpolate band structure and calculate derivatives.\nAutomatically creates optical elements if no others present.', const=3, default=False, type=int)
  parser.add_argument('--peierls',  help='Enforce Peierls approximation (overwrites existing optical elements).', default=False, action='store_true')

  parser.add_argument('--debug',    help=argparse.SUPPRESS, default=False, action='store_true')
  return parser.parse_args(args)

class Program(object):
  '''
  Program class which executes the DFT read-in,
  BTP interpolation, Band truncation and output.
  '''

  def __init__(self, loglevel=1):
    '''
    Parse the arguments and define the input function (python 2/3 compatibility)
    and define the logger.
    '''
    self.args = parse_args()
    self.inputmethod = input if sys.version_info >= (3, 0) else raw_input
    self.setlogger(0 if self.args.debug else loglevel)

  def setlogger(self, value):
    '''
    Define a custom logger
    '''
    if value < 0: value = 0
    if value > 4: value = 4
    levels = [logging.DEBUG,logging.INFO,logging.WARNING,logging.ERROR,logging.CRITICAL]

    self.log = logging.getLogger()   # apparently this has to be empty
    self.log.setLevel(levels[value]) # the root logger should be set to DEBUG
                                     # it essentially sets a lower limit for all the handlers
    # configure the console stream
    console = logging.StreamHandler()
    console.setFormatter(LogFormatter())
    console.setLevel(levels[value])
    self.log.addHandler(console)

    # configure the file stream
    # fileh   = logging.FileHandler('logfile.log')
    # fileh.setFormatter(logging.Formatter('%(asctime)s: %(name)s: %(message)s'))
    # fileh.setLevel(logging.WARNING)
    # self.log.addHandler(fileh)

  def main(self):
    '''
    Check for existance of the provided file.
    Define the DFT calculation.
    optional: Interpolate the band-structure
    optional: Truncate the band-structure
    Output everything to HDF5
    '''

    # option check
    if self.args.abs and self.args.truncate is None:
      self.log.error('--abs requires --truncate')
      return

    if self.args.interp and not btp_exists:
      self.log.error('Interpolation option requires BoltzTrap2')
      return

    # DFT detection + read-in
    dftsearch = DftDetection(self.args.system)
    dftdict = dftsearch()
    if dftdict is None:
      self.log.error('Could not detect supported DFT calculation in provided path.')
      return
    dftclass = dftdict.pop('dft')

    # check if output file exists
    if os.path.isfile(self.args.output):
      print('Output file already exists!')
      overwrite = self.inputmethod('Overwrite? (yes/no) ').strip().lower()
      if overwrite not in ['y','yes']:
        self.log.info('File will not be overwritten.\nExiting.')
        return

    calc = dftclass(self.args.system, optic=self.args.optic, **dftdict)
    calc.readData()

    # Band interpolation via BTP2
    if self.args.interp:
      self.log.info('')
      try:
        btinterp = BoltztrapInterpolation(calc)
        btinterp.interpolate(self.args.interp)
      except Exception as e:
        self.log.exception(str(e))
        self.log.warning('Continuing without interpolation data.\n')
        btinterp = None
    else:
      btinterp = None

    # Band truncation
    if self.args.trunc:
      self.log.info('')
      try:
        truncate(calc, btinterp, float(self.args.trunc[0]), \
                                 float(self.args.trunc[1]), absolute=self.args.abs)
      except TruncationError as e:
        self.log.exception(str(e))
        self.log.warning('Continuing without truncation.')

    # Data output
    self.log.info('')
    h5output(self.args.output, calc, btinterp, self.args.peierls)

    print("Output file {!r} successfully created.".format(self.args.output))
    print("File size: {} MB.".format(os.stat(self.args.output).st_size/1000000))

  def cleanup(self):
    if os.path.isfile(self.args.output):
      os.remove(self.args.output)

  def run(self):
    try:
      self.main()
    except KeyboardInterrupt:
      self.log.info('User exit ...')
    except MemoryError:
      self.log.exception('Memory error: Initialized arrays require too much memory.')
    except Exception as e:
      self.log.exception(str(e))

if __name__ == '__main__':
  Program(loglevel=1).run()
