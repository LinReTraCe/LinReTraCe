#! /usr/bin/env python

import sys
import os
import logging
import argparse

import numpy as np
import scipy.optimize

from structure.inout import h5output
from structure.wannier import Wannier90Calculation
from structure.wannier import wannier90hamiltonian # wannier90 hk file
from structure.wannier import hamiltonian_matrix    # hk in matrix form

'''
lwann : Pre-processing of Wannier90 folder and Wannier90 Hamiltonian files
'''

__author__     = 'Matthias Pickem'
__maintainer__ = 'Matthias Pickem'
__email__      = 'matthias.pickem@gmail.com'
__version__    = '0.1'
__status__     = 'Dev'
__license__    = 'GPLv3'
__credits__    = ['Matthias Pickem', 'Emanuele Maggio', 'Jan M. Tomczak']

def parse_args(args=None):
  parser = argparse.ArgumentParser(
    description='Argument parser for Wannier90 pre-processing of LRTC',
    epilog="That's the end of the help")
  parser.add_argument('system', help='Folder of Wannier90 calculation')
  parser.add_argument('-c', '--charge', type=float, help='Number of electrons in the provided bands. If not provided determine it.')
  parser.add_argument('-o', '--output', help='Outputname of hdf5 (default="lrtc-wann.hdf5")', default='lrtc-wann.hdf5')
  group = parser.add_mutually_exclusive_group(required=False)
  group.add_argument('--kmesh', nargs=3, help='Custom k grid - must conform original grid (8x8x5 -> 20x20x5)')
  group.add_argument('--wien2k',  help='Use Wien2K k grid instead (case.struct, case.klist must be present in Wannier90 folder)', default=False, action='store_true')
  parser.add_argument('--nocorrection', help='Do not calculate the correction terms to the Peierls approximation', default=False, action='store_true')
  parser.add_argument('--intraonly', help='Only output intra elements', default=False, action='store_true')
  parser.add_argument('--debug', help=argparse.SUPPRESS, default=False, action='store_true')
  return parser.parse_args(args)

class log_formatter(logging.Formatter):
  def format(self, record):
    if record.levelname == 'INFO':
      return record.msg # so it looks like print
    else:
      return '{}: {}: {}'.format(record.filename, record.levelname,record.msg) # more information

if __name__ == '__main__':
  error = lambda string: sys.exit('lwann: {}'.format(string))
  args = parse_args()
  # args = parse_args('../t2g 1 --kmesh 20 20 20 --intra'.split())
  debug = args.debug

  ''' define logging '''
  logger = logging.getLogger()
  logger.setLevel(logging.DEBUG if debug else logging.INFO)
  console = logging.StreamHandler()
  console.setFormatter(log_formatter())
  console.setLevel(logging.DEBUG if debug else logging.INFO)
  logger.addHandler(console)

  if os.path.isfile(args.system):
    try:
      ham = wannier90hamiltonian(hk_file=args.system, charge=args.charge)
      h5output(args.output, ham, ham, peierls=True)
    except Exception as e:
      error(str(e)+"\nExit.")
  else:
    try:
      ham = Wannier90Calculation(args.system, args.charge)
      ham.readData()
      if args.kmesh:
        ham.expandKmesh(np.array(args.kmesh, dtype=int))
      elif args.wien2k:
        ham.readWien2k()
      ham.diagData(peierlscorrection = not args.nocorrection)
      ham.calcOptical()
      if args.charge:
        ham.outputData(args.output, intraonly=args.intraonly)
      else:
        ham.outputData(args.output, mu=0., intraonly=args.intraonly)
    except Exception as e:
      error(str(e)+"\nExit.")

  sys.exit(0)


  # INTERFACE WITH hamiltonian arrays
  if False:
    hk = np.zeroes((8000,3,3), dtype=np.float64)
    vk = np.zeroes((8000,3,3,3), dtype=np.float64)
    ck = np.zeroes((8000,3,3,6), dtype=np.float64)
    ham = hamiltonian_matrix(hk, vk, ck, charge=1)
    fname = 'SVO.hdf5'
    ham.outputData(fname)

    plot = False

    if plot:
      try:
        logging.getLogger("matplotlib").setLevel(logging.WARNING)
        import matplotlib.pyplot as plt
      except ImportError:
        error('Debug option requires matplotlib library')

      for iband in range(ham.energyBandMax):
        plt.plot(ham.energies[0][:,iband], label='band {}'.format(iband+1), lw=2)
        mean = np.mean(ham.energies[0][:,iband])
      plt.axhline(ham.mu, label='mu_ham = {:.3f}'.format(ham.mu), color='black', lw=1, ls='--')
      plt.xlabel(r'$k_i$')
      plt.ylabel(r'$\varepsilon(k_i)$')
      plt.legend(loc='best')
      plt.show()

    if plot:
      ham.calcDOS(gamma=0.03, npoints=10000, windowsize=1.5)

      fig = plt.figure()
      ax1 = fig.add_subplot(111)
      ax2 = ax1.twinx()
      for ispin in range(ham.spins):
        ax1.plot(ham.dosaxis, ham.dos[ispin], label='dos', color='blue', lw=2)
        ax2.plot(ham.dosaxis, ham.nos[ispin], label='nos', color='red', lw=2)

      ax1.axvline(x=ham.mu, color='black', lw=1, ls='-')
      ax1.set_ylim(ymin=0)
      ax1.set_ylabel(r'$\mathrm{dos}$')
      ax1.set_xlabel(r'$\mu$ [eV]')
      ax1.legend(loc='center left')

      ax2.axhline(y=ham.charge, color='black', lw=1, ls='-')
      ax2.set_ylim(ymin=0)
      ax2.set_ylabel(r'$\mathrm{nos}$')
      ax2.legend(loc='center right')

    plt.show()
