#! /usr/bin/env python

from __future__ import print_function, division, absolute_import
import argparse
import sys

'''
lconfig: Interactive setup for simplistic config files for the LRTC main code
'''

__author__     = 'Matthias Pickem'
__maintainer__ = 'Matthias Pickem'
__email__      = 'matthias.pickem@gmail.com'
__version__    = '0.1'
__status__     = 'Dev'
__license__    = 'GPLv3'
__credits__    = ['Matthias Pickem', 'Emanuele Maggio', 'Jan M. Tomczak']

def parse_args(args=None):
  parser = argparse.ArgumentParser(
    description='''Argument parser for the ''',
    formatter_class=argparse.RawTextHelpFormatter,
    epilog="That's the end of the help")
  parser.add_argument('-o', '--output', nargs='?', help='config file name', default='config.lrtc')

  return parser.parse_args(args)

def main():
  args = parse_args()
  config = {}

  warning = lambda string: print('--lconfig warning: ' + string)

  ''' INPUT '''

  print(' INTERACTIVE GENERATION OF LRTC CONFIG FILES\n')
  while True:
    config['energyfile'] = str(input(' energy file: '))
    if config['energyfile']:
      break
    print('Energy file is a mandatory input. <Ctrl-C> to quit')
  config['outputfile'] = str(input(' output file: '))
  if not config['outputfile']:
    print('No output file given: LinReTraCe will create a default filename.')
  intra = input(' calculate intra-band quantities [y,n]: ')
  config['intra'] = True if intra.lower() == 'y' else False
  inter = input(' calculate inter-band quantities [y,n]: ')
  config['inter'] = True if inter.lower() == 'y' else False
  boltz = input(' calculate boltzmann quantities [y,n]: ')
  config['boltz'] = True if boltz.lower() == 'y' else False
  bfield = input(' calculate magnetic field quantities [y,n]: ')
  config['bfield'] = True if bfield.lower() == 'y' else False
  quad   = input(' calculate quadruple precision [y,n]: ')
  config['quad'] = True if quad.lower() == 'y' else False

  while True:
    config['mode'] = input('\n run mode (temp [1], mu [2]): ')
    try:
      config['mode'] = int(config['mode'])
      if config['mode'] != 1 and config['mode'] != 2: raise ValueError
      break
    except ValueError:
      print('Run mode is a mandatory input ( 1 / 2 ). <Ctrl-C to quit')

  scatfile = input(' use Scattering file [y,n]: ')
  if scatfile.lower() == 'y':
    while True:
      config['scatfile']     = str(input('   scattering file: '))
      if config['scatfile']:
        break
      print('Scattering file is a mandatory input. <Ctrl-C> to quit')
    config['scatoffset']   = input('   additional offset: ')
    if not config['scatoffset']:
      config['scatoffset'] = 0
      print('Scattering Offset set to 0')
    else:
      config['scatoffset'] = float(config['scatoffset'])
  else:
    config['scatfile'] = False
    if config['mode'] == 1:  # TEMP MODE
      config['tempmode'] = {}
      print('\n  TEMP-MODE configuration:')
      musearch = int(input(' chemical potential (fermi [1], digamma [2]): '))
      config['tempmode']['fermiocc'] = True if musearch==1 else False

      t1 = float(input(' temperature starting point [K]: '))
      t2 = float(input(' temperature ending   point [K]: '))
      config['tempmode']['tmin']    = min(t1,t2)
      config['tempmode']['tmax']    = max(t1,t2)
      config['tempmode']['tpoints'] = int(input(' temperature points: '))
      log = input(' logarithmic temperature steps [y,n]: ')
      config['tempmode']['tlog']    = True if log.lower() == 'y' else False
      config['tempmode']['scat']    = list(input(' scattering coefficients (separated by space): ').split())
      config['tempmode']['qp']      = list(input(' quasiparticle coefficients (separated by space): ').split())

    elif config['mode'] == 2: # MU MODE
      config['mumode'] = {}
      print('\n  MU-MODE configuration:')
      config['mumode']['temp'] = float(input(' temperature [K]: '))

      # default values here
      mu1 = float(input(' chemical potential starting point: '))
      mu2 = float(input(' chemical potential ending   point: '))
      config['mumode']['mumin']    = min(mu1,mu2)
      config['mumode']['mumax']    = max(mu1,mu2)
      config['mumode']['mupoints'] = int(input(' chemical potential points: '))
      config['mumode']['scat']     = float(input(' scattering rate: '))
      config['mumode']['qp']       = float(input(' quasiparticle weight: '))

  ''' OUTPUT '''

  with open(args.output,'w') as cf:
    cf.write('[General]\n')
    if config['mode'] == 1:
      cf.write(f"RunMode         =  temp\n")
    elif config['mode'] == 2:
      cf.write(f"RunMode         =  mu\n")
    cf.write(f"EnergyFile      =  {config['energyfile']}\n")
    if config['outputfile']:
      cf.write(f"OutputFile      =  {config['outputfile']}\n")
    cf.write(f"BFieldMode      =  {str(config['bfield'])[0]}\n")
    cf.write(f"Interband       =  {str(config['inter'])[0]}\n")
    cf.write(f"Intraband       =  {str(config['intra'])[0]}\n")
    cf.write(f"Boltzmann       =  {str(config['boltz'])[0]}\n")
    cf.write(f"QuadResponse    =  {str(config['quad'])[0]}\n")

    if config['mode'] == 1: # tempmode
      if config['scatfile']:
        cf.write(f"FermiOccupation =  T\n")
      else:
        cf.write(f"FermiOccupation =  {str(config['tempmode']['fermiocc'])[0]}\n")
      cf.write("\n\n[TempMode]\n")
      cf.write(f"[[Scattering]]\n")
      if config['scatfile']:
        cf.write(f"ScatteringFile   =  {config['scatfile']}\n")
        cf.write(f"ScatteringOffset =  {config['scatoffset']}\n")
      else:
        cf.write(f"TMinimum =  {config['tempmode']['tmin']}\n")
        cf.write(f"TMaximum =  {config['tempmode']['tmax']}\n")
        cf.write(f"TPoints  =  {config['tempmode']['tpoints']}\n")
        cf.write(f"TLogarithmic = {str(config['tempmode']['tlog'])[0]}\n")
        cf.write(f"ScatteringCoefficients     =  {' '.join(config['tempmode']['scat'])}\n")
        cf.write(f"QuasiParticleCoefficients  =  {' '.join(config['tempmode']['qp'])}\n")
    elif config['mode'] == 2: # mumode
      cf.write("FermiOccupation =  T\n") # reasonable to calculate carrier doping
      cf.write("\n[MuMode]\n")
      cf.write("[[Scattering]]\n")
      if config['scatfile']:
        cf.write(f"ScatteringFile   =  {config['scatfile']}\n")
        cf.write(f"ScatteringOffset =  {config['scatoffset']}\n")
      else:
        cf.write(f"Temperature = {config['mumode']['temp']}\n")
        cf.write(f"MuMinimum = {config['mumode']['mumin']}\n")
        cf.write(f"MuMaximum = {config['mumode']['mumax']}\n")
        cf.write(f"MuPoints  = {config['mumode']['mupoints']}\n")
        cf.write(f"ScatteringRate       = {config['mumode']['scat']}\n")
        cf.write(f"QuasiParticleWeight  = {config['mumode']['qp']}\n")

  print(f"\n\n{args.output} successfully created.")

if __name__ == '__main__':
  try:
    main()
  except KeyboardInterrupt:
    sys.exit('\nExit by user.')
  except Exception as e:
    sys.exit('\nError: {}'.format(e))
